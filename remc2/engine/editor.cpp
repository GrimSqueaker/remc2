#include "editor.h"

bool changed = false;
int stage = 1000;

void init_pal() {
	Bit8u temppal[0x300];
	for (int i = 0; i < 256; i++)
	{
		temppal[i * 3] = i;
		temppal[i * 3 + 1] = i;
		temppal[i * 3 + 2] = i;
	}
	VGA_Set_pallette2(temppal);
};

void clean_tarrain()
{
}

void editor_loop();
void terrain_recalculate();


void editor_run()
{
	

	

	//savepal
	//save sceenbuffer
	//save D41A0_BYTESTR_0
	D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5 = 128;
	D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9 = 128;
	D41A0_BYTESTR_0.str_2FECE.word_0x2FEED = 128;
	D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1 = 128;
	init_pal();
	clean_tarrain();
	terrain_recalculate();
	editor_loop();
	//restorepal
	//restore screenbuffer
	//restore D41A0_BYTESTR_0
}

void terrain_recalculate() {
	

	x_WORD_17B4E0 = D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5;
	D41A0_BYTESTR_0.dword_0x8 = D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5;
	memset((void*)x_WORD_15B4E0_source, 0, 0x20000);
	sub_B5E70_decompress_terrain_map_level(x_WORD_17B4E0, D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9, D41A0_BYTESTR_0.str_2FECE.word_0x2FEED, D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1);
	sub_44DB0_truncTerrainHeight();//225db0 //trunc and create
	if (stage == 1)
	{
		memset((void*)x_WORD_15B4E0_source, 0, 0x20000);
		sub_44E40(D41A0_BYTESTR_0.str_2FECE.word_0x2FEF5, D41A0_BYTESTR_0.str_2FECE.word_0x2FEF9);//225e40 //add any fields
	}
	changed = false;
};

void drawmenus() {
};
void drawterrain(int x,int y) {
	int k = 0;
	for (int i = 0; i < 256; i++)
		for (int j = 0; j < 256; j++)
		{
			x_DWORD_180628b_screen_buffer[(j+y) * 640 + (i+x)] = x_BYTE_11B4E0_height[k];
			k++;
		}
};
void drawdetail(int x, int y,int size,int zoom) {
	int k = 0;
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
		{
			bool notframe = true;
			int posx = (x_DWORD_17DEE4_mouse_positionx)+(i - size / 2) / zoom;
			int posy = (x_DWORD_17DEE4_mouse_positiony - 480 + 256) + (j - size / 2) / zoom;
			if (posx < 0) { posx = 0; notframe = false; }
			if (posy < 0) { posy = 0; notframe = false; }
			if (posx > 255) { posx = 255; notframe = false; }
			if (posy > 255) { posy = 255; notframe = false; }
			if (notframe)
			{
				k = 256 * (posy)+posx;
				x_DWORD_180628b_screen_buffer[(j + y) * 640 + (i + x)] = x_BYTE_11B4E0_height[k];
			}
			else
				x_DWORD_180628b_screen_buffer[(j + y) * 640 + (i + x)] = 255;
			//k++;
		}
};

Bit16s editor_regiondata[22 * 24] = {
	                                       //position    //size              //type gr      under mou 
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x0004,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0104,0x0004,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0108,0x0004,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0118,0x0004,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x011c,0x0004,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0120,0x0004,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,

		0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x0014,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0104,0x0014,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0108,0x0014,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0118,0x0014,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x011c,0x0014,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0120,0x0014,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,

		0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x0024,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0104,0x0024,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0108,0x0024,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0118,0x0024,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x011c,0x0024,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0120,0x0024,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,

		0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x0034,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0104,0x0034,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0108,0x0034,0x0004,0x0008,0x0000,0x0304,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0118,0x0034,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x011c,0x0034,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
		0x0000,0x0000,0x0000,0x0000,0x0000,0x0120,0x0034,0x0004,0x0008,0x0000,0x0506,0x0101,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
};

/*
Bit16s x_WORD_E1F84[68] =//in region?
{
	//                                   xmin  ymin   sizex	 sizey        type?
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0123,0x00CD,0x003C,0x003C,0x0000,0x2324,
*/

Bit8u cursor[8 * 8] = {
	0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
	0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,
	0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff
};

Bit8u triangleL[8 * 4] = {
	0x00,0x00,0x00,0xff,
	0x00,0x00,0xff,0xff,
	0x00,0xff,0x00,0xff,
	0xff,0x00,0x00,0xff,
	0xff,0x00,0x00,0xff,
	0x00,0xff,0x00,0xff,
	0x00,0x00,0xff,0xff,
	0x00,0x00,0x00,0xff
};

Bit8u triangleLfull[8 * 4] = {
	0x00,0x00,0x00,0xff,
	0x00,0x00,0xff,0xff,
	0x00,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,
	0x00,0xff,0xff,0xff,
	0x00,0x00,0xff,0xff,
	0x00,0x00,0x00,0xff
};

Bit8u triangleP[8 * 4] = {
	0xff,0x00,0x00,0x00,
	0xff,0xff,0x00,0x00,
	0xff,0x00,0xff,0x00,
	0xff,0x00,0x00,0xff,
	0xff,0x00,0x00,0xff,
	0xff,0x00,0xff,0x00,
	0xff,0xff,0x00,0x00,
	0xff,0x00,0x00,0x00
};

Bit8u trianglePfull[8 * 4] = {
	0xff,0x00,0x00,0x00,
	0xff,0xff,0x00,0x00,
	0xff,0xff,0xff,0x00,
	0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0x00,
	0xff,0xff,0x00,0x00,
	0xff,0x00,0x00,0x00
};

void drawx(int x,int y, int index,int type=0) {
	if (type > 100)
		;// sub_2BB40_draw_bitmap(x, y, xy_DWORD_17DED4_spritestr[index]);
	switch (index)
	{
	case 0://cursor
	{
		int width = 8;
		int height = 8;
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++)
			{
				if(cursor[i + 8 * j]==0xff)
					*(Bit8u*)(x_DWORD_180628b_screen_buffer + i + x + 640 * (y + j)) = 255;				
			}
		break;
	}
	case 1://rectangle
	{
		int width = 25;
		int height = 25;
		for (int i = 0; i < width; i++)
		{
			*(Bit8u*)(x_DWORD_180628b_screen_buffer + i + x + 640 * (y + 0)) = 255;
			*(Bit8u*)(x_DWORD_180628b_screen_buffer + i + x + 640 * (y + height - 1)) = 255;
		}
		for (int j = 0; j < height; j++)
		{
			*(Bit8u*)(x_DWORD_180628b_screen_buffer + x + 0 + 640 * (y + j)) = 255;
			*(Bit8u*)(x_DWORD_180628b_screen_buffer + x + width - 1 + 640 * (y + j)) = 255;
		}
		break;
	}
	case 2://filled rectangle
	{
		int width = 25;
		int height = 25;
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++)
			{
				*(Bit8u*)(x_DWORD_180628b_screen_buffer + i + x + 640 * (y + j)) = 255;
			}
		break;
	}
	case 3://triangleL
	{
		int width = 4;
		int height = 8;
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++)
			{
				if (triangleL[i + width * j] == 0xff)
					* (Bit8u*)(x_DWORD_180628b_screen_buffer + i + x + 640 * (y + j)) = 255;
			}
		break;
	}
	case 4://triangleLfull
	{
		int width = 4;
		int height = 8;
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++)
			{
				if (triangleLfull[i + width * j] == 0xff)
					* (Bit8u*)(x_DWORD_180628b_screen_buffer + i + x + 640 * (y + j)) = 255;
			}
		break;
	}
	case 5://triangleP
	{
		int width = 4;
		int height = 8;
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++)
			{
				if (triangleP[i + width * j] == 0xff)
					* (Bit8u*)(x_DWORD_180628b_screen_buffer + i + x + 640 * (y + j)) = 255;
			}
		break;
	}
	case 6://trianglePfull
	{
		int width = 4;
		int height = 8;
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++)
			{
				if (trianglePfull[i + width * j] == 0xff)
					* (Bit8u*)(x_DWORD_180628b_screen_buffer + i + x + 640 * (y + j)) = 255;
			}
		break;
	}
	}
}

void drawcursor() {
	drawx(x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DEE4_mouse_positiony, 0);
};

void drawtexts() {
	/*sub_2BC10_draw_text((char*)"word_0x2FEE5", 100, 0, 255);
	char temp[256];
	sprintf(temp,"%X", D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5);
	sub_2BC10_draw_text(temp, 100, 0, 255);*/
}

void editor_mouse_events()//25f0e0
{
	int v3; // edx
	Bit16s v0 =0;

	Bit32u i = 0;
	do
	{
		if (!(x_WORD_17DEEE & 1) || v0)
		{
			if ((editor_regiondata[i + 12] & 0xff) && sub_7B200_in_region(&editor_regiondata[i], x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DEE4_mouse_positiony))//confirm language
				v3 = editor_regiondata[i + 10] & 0xff;
			else
				v3 = (editor_regiondata[i + 10] & 0xff00) >> 8;
			drawx(editor_regiondata[i + 5], editor_regiondata[i + 6], v3);
			//sub_2BB40_draw_bitmap(x_WORD_E1F84[i + 5], x_WORD_E1F84[i + 6], xy_DWORD_17DED4_spritestr[v3]);
		}
		else if (sub_7B200_in_region(&editor_regiondata[i], x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DEE4_mouse_positiony))//change language
		{
			//sub_8F100_sound_proc19(0, 14, 127, 64, 0x64u, 0, 3u);
			//sub_2BB40_draw_bitmap(editor_regiondata[i + 5], editor_regiondata[i + 6], xy_DWORD_17DED4_spritestr[editor_regiondata[i + 10] & 0xff]);//asi vykresleni stisknuteho tlacitka
			drawx(editor_regiondata[i + 5], editor_regiondata[i + 6], editor_regiondata[i + 10] & 0xff);
			v0 = editor_regiondata[i + 11] & 0xff;
			switch (i / 22)
			{
			case 0: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5 -= 256; changed = true; break; }
			case 1: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5-=16; changed = true; break; }
			case 2: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5--; changed = true; break; }
			case 3: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5++; changed = true; break; }
			case 4: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5+=16; changed = true; break; }
			case 5: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5+=256; changed = true; break; }

			case 6: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9 -= 256; changed = true; break; }
			case 7: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9 -= 16; changed = true; break; }
			case 8: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9--; changed = true; break; }
			case 9: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9++; changed = true; break; }
			case 10: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9 += 16; changed = true; break; }
			case 11: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9 += 256; changed = true; break; }

			case 12: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEED -= 256; changed = true; break; }
			case 13: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEED -= 16; changed = true; break; }
			case 14: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEED--; changed = true; break; }
			case 15: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEED++; changed = true; break; }
			case 16: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEED += 16; changed = true; break; }
			case 17: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEED += 256; changed = true; break; }

			case 18: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1 -= 256; changed = true; break; }
			case 19: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1 -= 16; changed = true; break; }
			case 20: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1--; changed = true; break; }
			case 21: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1++; changed = true; break; }
			case 22: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1 += 16; changed = true; break; }
			case 23: {D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1 += 256; changed = true; break; }
			}
			/*
				D41A0_BYTESTR_0.str_2FECE.word_0x2FEE5 = 128;
				D41A0_BYTESTR_0.str_2FECE.word_0x2FEE9 = 128;
				D41A0_BYTESTR_0.str_2FECE.word_0x2FEED = 128;
				D41A0_BYTESTR_0.str_2FECE.word_0x2FEF1 = 128;
			*/
		}
		i += 22;
	} while (editor_regiondata[i + 10] & 0xff);
}

void editor_loop()
{
	bool runnning = true;
	while (runnning)
	{
		if (x_BYTE_17DF10_get_key_scancode == 59)
		{
			runnning = false;
		}
		memset(x_DWORD_180628b_screen_buffer, 0, 640 * 480);
		
		editor_mouse_events();//25f0e0 adress 258ca1 - zmeni tlacitko, vrati stav kliknuti
		if (changed)
			terrain_recalculate();
		//4527b9=[ebp+66]+6 4527bf 161545005835->58e2e2e2e2e2
		//[ebp+66]+6//save1
		drawmenus();
		drawterrain(0,480-256);
		drawdetail(0,0,100,4);
		drawtexts();
		drawcursor();
		sub_75200_VGA_Blit640(480);//vykresleni //256200		
		sub_7A060_get_mouse_and_keyboard_events();//25b060 adress 258ddf
	}
}